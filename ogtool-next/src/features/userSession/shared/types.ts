import { z } from 'zod';
import { FlexibleDateSchema } from '@/schemas/flexibleDateSchema';

/**
 * Zod schema for the UserSession domain model.
 */
export const UserSessionSchema = z.object({
    id: z.string().uuid(),
    createdAt: FlexibleDateSchema,
    updatedAt: FlexibleDateSchema,
});

/** Domain model type for UserSession, derived from the Zod schema. */
export type UserSession = z.infer<typeof UserSessionSchema>;

/**
 * Zod schema for creating a new UserSession record.
 * This is an empty object because the ID is generated by the service.
 */
export const CreateUserSessionSchema = z.object({}).strict();

/** Type for creating a new UserSession, derived from the schema. */
export type CreateUserSession = z.infer<typeof CreateUserSessionSchema>;

/**
 * Zod schema for data passed to the repository's create method.
 */
export const UserSessionCreationDataSchema = z.object({
    id: z.string().uuid(),
});

/** Type for the data passed to the repository's create method. */
export type UserSessionCreationData = z.infer<typeof UserSessionCreationDataSchema>;


/**
 * Zod schema for updating an existing UserSession record.
 * It is empty as there are no updatable fields.
 */
export const UpdateUserSessionSchema = z.object({}).strict();

/** Type for updating an existing UserSession, derived from the schema. */
export type UpdateUserSession = z.infer<typeof UpdateUserSessionSchema>; 